* 第21回Asakusa.rb(2009-10-13)

{{mail(shintaro.kakutani@gmail.com,1254968816)
10/13って開発者ミーティングの日([ruby-dev:39404] )だからko1さんには来てもらえないのか……。

そういえば RubyKaigiにも来てくれた Muhammed Aliさんが
"The Ruby 19x Web Servers Booklet"というドキュメントを書いたみたいです。
a survey of architectual choices & analysis of relative performance
だそうな。60ページぐらい。後ろのほうにいろいろグラフのってました。
http://oldmoe.blogspot.com/2009/10/ruby-19x-web-servers-booklet.html
}}
{{mail(ko1@atdot.net,1254969439)
KAKUTANI Shintaro wrote::
> 10/13って開発者ミーティングの日([ruby-dev:39404] )だからko1さんには来てもらえないのか……。

　この日は行けるかも．でもどうかな．よくわからないな（次の日英語でなんか
しないといけないかもしれず）．

> そういえば RubyKaigiにも来てくれた Muhammed Aliさんが
> "The Ruby 19x Web Servers Booklet"というドキュメントを書いたみたいです。
> a survey of architectual choices & analysis of relative performance
> だそうな。60ページぐらい。後ろのほうにいろいろグラフのってました。
> http://oldmoe.blogspot.com/2009/10/ruby-19x-web-servers-booklet.html

　英語！　誰か3行でまとめて．

　彼に言われてた Fiber の高速化を，学生がやってくれました．3倍くらい速く
なった．

-- 
// SASADA Koichi at atdot dot net
}}
{{mail(shintaro.kakutani@gmail.com,1254969569)
かくたにです。

たまにはダイビルにお邪魔させていただくというのはいかがでしょうか?!

2009/10/8 SASADA Koichi <ko1@atdot.net>:
> KAKUTANI Shintaro wrote::
>> 10/13って開発者ミーティングの日([ruby-dev:39404] )だからko1さんには来てもらえないのか……。
>
> 　この日は行けるかも．でもどうかな．よくわからないな（次の日英語でなんか
> しないといけないかもしれず）．
>
>> そういえば RubyKaigiにも来てくれた Muhammed Aliさんが
>> "The Ruby 19x Web Servers Booklet"というドキュメントを書いたみたいです。
>> a survey of architectual choices & analysis of relative performance
>> だそうな。60ページぐらい。後ろのほうにいろいろグラフのってました。
>> http://oldmoe.blogspot.com/2009/10/ruby-19x-web-servers-booklet.html
>
> 　英語！　誰か3行でまとめて．


だれかwww

>
> 彼に言われてた Fiber の高速化を，学生がやってくれました．3倍くらい速く
> なった．

おおー。3倍!

-- 
KAKUTANI Shintaro
http://kakutani.com
}}
{{mail(ronnie@dio.jp,1254974326)
松田です。

On Thu, 8 Oct 2009 11:39:28 +0900
KAKUTANI Shintaro <shintaro.kakutani@gmail.com> wrote:

> >> そういえば RubyKaigiにも来てくれた Muhammed Aliさんが
> >> "The Ruby 19x Web Servers Booklet"というドキュメントを書いたみたいです。
> >> a survey of architectual choices & analysis of relative performance
> >> だそうな。60ページぐらい。後ろのほうにいろいろグラフのってました。
> >> http://oldmoe.blogspot.com/2009/10/ruby-19x-web-servers-booklet.html
> >
> > 　英語！　誰か3行でまとめて．
> 
> 
> だれかwww

この本ではRuby 1.9で動くいろんなWEBサーバーのベンチをとったりする。
昔はWEBrickしかなかったけどMongrelが登場して以降、いろんな早いWEBサーバーが出てきた。

Concurrencyの戦略については、マルチプロセルとかマルチスレッドとかその複合技とかいろいろある。
WEBrickはあんまり負荷がでかいところで使うべきではない。
Mongrelは、Concurrency戦略はWEBrickと変わらない割にはWERrickよりだいぶ速い。パーサーが他のいろんなサーバーたちにも再利用されてる。
Thinはその名のとおりすっごい薄いglueみたいなもん。組み合わせるライブラリとかによってはめちゃめちゃ速いかもね。
Passengerはセットアップも一番簡単だし、今や最良の選択肢になった。実はこのモデルだと大してスケールできないんだけど、でもまぁ、Railsも含めてRubyのWEBアプリなんてみんなシングルスレッドだからまぁそんなもんかな。

で、ベンチマーク。まずは静的ファイルがどれくらい捌けるか。PassngerはApacheとかNgnixのベンチにしかならないので対象外(たぶん最速。Nginxなら
Thinの倍ぐらい速い)。
小っちゃいファイルをいっぱい読ませる場合はThinがやや速い。ていうかグラフが基本的にWEBrickいじめ。
すごいでっかいファイルをダウンロードする場合は、むしろWEBrickが速かったりする。Thinででかいファイルを処理しようとするといろいろあってメモリが溢れた。
ついでに、Thin(というかEventMachne)には内部構造的な問題があって、10発以上のリクエストが一度にどばっと来たときに10個ずつに分けて捌いてくからえらく待たされる場合があるんだよね。
ただし、どっちにしろ、静的ファイルだったらApacheとかNginxとかに処理させるべきで、RubyのWEBサーバーの仕事ではない。

Railsでhello world。どれもあんま変わんない。Thinが早くて、MongrelとPassengerが同じぐらい。
Railsででっかいレスポンスを返させたりするとPassengerがわずかに一番手になったりする。あとPassengerはレスポンスがでかくてもメモリ使用量が安定してる。THinはひどい。

ということで、結論。
1. 静的ファイルは、Nginxに、それからApacheに逃がせ
2. Railsアプリを動かすぶんには、パフォーマンス的にはどのサーバーを使ってもほとんど一緒みたいなもん(WEBrickでさえもね！)。敢えて言うなら、一番お手軽なPassengerを使っとけばいいんじゃないかな。
3. WEBサービスとかに使うんだったらThinでしょ。

ぜんぜん3行じゃなくてすいませんｗ
ということで、Ruby 1.9そのものの話はまったくナシですね。
とりあえず、35ページ目でどんなベンチマーク取ってるの？
っていう一覧表が載ってて、Asakusa.rb的には
すごく参考になります。

-- 
Akira Matsuda <ronnie@dio.jp>

}}
{{mail(shintaro.kakutani@gmail.com,1254974540)
2009/10/8 Akira Matsuda <ronnie@dio.jp>:
> ということで、Ruby 1.9そのものの話はまったくナシですね。

ちょwwww
}}
{{mail(ko1@atdot.net,1254974891)
　ささだです．

Akira Matsuda wrote::
>>>> そういえば RubyKaigiにも来てくれた Muhammed Aliさんが
>>>> "The Ruby 19x Web Servers Booklet"というドキュメントを書いたみたいです。
>>>> a survey of architectual choices & analysis of relative performance
>>>> だそうな。60ページぐらい。後ろのほうにいろいろグラフのってました。
>>>> http://oldmoe.blogspot.com/2009/10/ruby-19x-web-servers-booklet.html
>>> 　英語！　誰か3行でまとめて．
>>
>> だれかwww
> 
> この本ではRuby 1.9で動くいろんなWEBサーバーのベンチをとったりする。
> 昔はWEBrickしかなかったけどMongrelが登場して以降、いろんな早いWEBサーバーが出てきた。
> 
> Concurrencyの戦略については、マルチプロセルとかマルチスレッドとかその複合技とかいろいろある。
> WEBrickはあんまり負荷がでかいところで使うべきではない。
> Mongrelは、Concurrency戦略はWEBrickと変わらない割にはWERrickよりだいぶ速い。パーサーが他のいろんなサーバーたちにも再利用されてる。
> Thinはその名のとおりすっごい薄いglueみたいなもん。組み合わせるライブラリとかによってはめちゃめちゃ速いかもね。
> Passengerはセットアップも一番簡単だし、今や最良の選択肢になった。実はこのモデルだと大してスケールできないんだけど、でもまぁ、Railsも含めてRubyのWEBアプリなんてみんなシングルスレッドだからまぁそんなもんかな。
> 
> で、ベンチマーク。まずは静的ファイルがどれくらい捌けるか。PassngerはApacheとかNgnixのベンチにしかならないので対象外(たぶん最速。Nginxなら
> Thinの倍ぐらい速い)。
> 小っちゃいファイルをいっぱい読ませる場合はThinがやや速い。ていうかグラフが基本的にWEBrickいじめ。
> すごいでっかいファイルをダウンロードする場合は、むしろWEBrickが速かったりする。Thinででかいファイルを処理しようとするといろいろあってメモリが溢れた。
> ついでに、Thin(というかEventMachne)には内部構造的な問題があって、10発以上のリクエストが一度にどばっと来たときに10個ずつに分けて捌いてくからえらく待たされる場合があるんだよね。
> ただし、どっちにしろ、静的ファイルだったらApacheとかNginxとかに処理させるべきで、RubyのWEBサーバーの仕事ではない。
> 
> Railsでhello world。どれもあんま変わんない。Thinが早くて、MongrelとPassengerが同じぐらい。
> Railsででっかいレスポンスを返させたりするとPassengerがわずかに一番手になったりする。あとPassengerはレスポンスがでかくてもメモリ使用量が安定してる。THinはひどい。
> 
> ということで、結論。
> 1. 静的ファイルは、Nginxに、それからApacheに逃がせ
> 2. Railsアプリを動かすぶんには、パフォーマンス的にはどのサーバーを使ってもほとんど一緒みたいなもん(WEBrickでさえもね！)。敢えて言うなら、一番お手軽なPassengerを使っとけばいいんじゃないかな。
> 3. WEBサービスとかに使うんだったらThinでしょ。
> 
> ぜんぜん3行じゃなくてすいませんｗ
> ということで、Ruby 1.9そのものの話はまったくナシですね。
> とりあえず、35ページ目でどんなベンチマーク取ってるの？
> っていう一覧表が載ってて、Asakusa.rb的には
> すごく参考になります。
> 

　素晴らしい！

　というか，1.9 でこれだけ動かせるんだ．

-- 
// SASADA Koichi at atdot dot net
}}
{{mail(l.g.chin@gmail.com,1255021824)
Unicornが話にでなくて残念。

紹介記事： http://tomayko.com/writings/unicorn-is-unix
本家： http://unicorn.bogomips.org/

作者のEric Wongはgit-svnの開発者としても有名。
DesignとPhilosophyのページも面白い。
http://unicorn.bogomips.org/PHILOSOPHY.html
http://unicorn.bogomips.org/DESIGN.html

ちなみに、Thin vs Unicorn: http://cmelbye.github.com/2009/10/04/thin-vs-unicorn.html
}}
{{mail(ogijun@gmail.com,1255275163)
うおお、defunktさまもUnicornについて書いてる!

http://github.com/blog/517-unicorn

On Fri, Oct 9, 2009 at 2:10 AM, Leonard Chin <l.g.chin@gmail.com> wrote:
> Unicornが話にでなくて残念。
>
> 紹介記事： http://tomayko.com/writings/unicorn-is-unix
> 本家： http://unicorn.bogomips.org/
>
> 作者のEric Wongはgit-svnの開発者としても有名。
> DesignとPhilosophyのページも面白い。
> http://unicorn.bogomips.org/PHILOSOPHY.html
> http://unicorn.bogomips.org/DESIGN.html
>
> ちなみに、Thin vs Unicorn: http://cmelbye.github.com/2009/10/04/thin-vs-unicorn.html
>


-- 
ogijun
}}
